package events;

/// Envelope wraps an Event and adds metadata.
message Envelope {
    /// Type of the wrapped event.
    enum EventType {
        LogMessage = 5;
    }

    required string origin = 1;               /// Unique description of the origin of this event.
    required EventType eventType = 2;         /// Type of wrapped event. Only the optional field corresponding to the value of eventType should be set.

    optional int64 timestamp = 6;             /// UNIX timestamp (in nanoseconds) event was wrapped in this Envelope.

    optional string deployment = 13;          /// Deployment name (used to uniquely identify source).
    optional string job = 14;                 /// Job name (used to uniquely identify source).
    optional string index = 15;               /// Index of job (used to uniquely identify source).
    optional string ip = 16;                  /// IP address (used to uniquely identify source).

    // Removed Heartbeat at position 3
    optional LogMessage logMessage = 8;
}

/// A LogMessage contains a "log line" and associated metadata.
message LogMessage {

    /// MessageType stores the destination of the message (corresponding to STDOUT or STDERR).
    enum MessageType {
        OUT = 1;
        ERR = 2;
    }

    required bytes message = 1;            /// Bytes of the log message. (Note that it is not required to be a single line.)
    required MessageType message_type = 2; /// Type of the message (OUT or ERR).
    required int64 timestamp = 3;          /// UNIX timestamp (in nanoseconds) when the log was written.
    optional string app_id = 4;            /// Application that emitted the message (or to which the application is related).
    optional string source_type = 5;       /// Source of the message. For Cloud Foundry, this can be "APP", "RTR", "DEA", "STG", etc.
    optional string source_instance = 6;   /// Instance that emitted the message.
}
